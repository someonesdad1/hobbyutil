# This file defines the projects and the location of the source files.  The
# fields are in YAML format and each entry is turned into a dictionary with
# the key being the item with the colon in the first column.  I chose to
# use YAML because it's a little more terse than using a python dictionary.
#
# The fields are:
#
#   subdir      Subdirectory name for the project
#   descr       Description of the project
#   files       Source files making up the project
#   ignore      If contains text, then the reason this project is ignored
#   srcdir      Where to find source files
#
# A * after a file name means it doesn't need to be included in the
# distribution, but only when the package is constructed.  If there is only
# one file not with a *, then it is the output; otherwise, a zipfile of the
# files is constructed.

ag:
    subdir: math
    descr: Contains formulas relating to analytic geometry in the plane
    files: [
        AnalyticGeometry.odt*, 
        AnalyticGeometry.pdf,
        pictures/trig_quadrants.png*,
        pictures/segment_2.png*,
        pictures/ellipse_circumference.png*,
        pictures/trig_functions.png*
    ]
    ignore: Needs updating
    srcdir: /math/AnalyticGeometry

antif:
    subdir: eng
    descr: How to calculate how much antifreeze to add to an existing
        partially-filled radiator to get a desired concentration.  It
        also looks at the refractometer, a tool to measure antifreeze
        concentrations and a lead-acid battery's sulfuric acid specific
        gravity (which tells you the state of charge).
    files: [
        antifreeze.odt*,
        antifreeze.pdf,
        pictures/freezing_point_depression_ethylene_glycol.png*,
        pictures/refractometer.jpg*,
        pictures/misco_side.jpg*,
        pictures/misco_side_open.jpg*,
        pictures/misco_bottom.jpg*,
        pictures/refractometer_display.jpg*,
        pictures/misco_scales.jpg*,
        pictures/sulfuric_acid_density.png*,
        pictures/sulfuric_acid_density_residuals.png*
    ]
    ignore: Needs updating
    srcdir: /science/antifreeze

app:
    subdir: util
    descr: Handy application if you like to work at a cygwin command
        line. Given one or more files, it will cause them to be opened
        with their registered application.
    files: [app.cpp]
    srcdir: /tools

asc:
    subdir: util
    descr: Console python script to print out ASCII character table
        in decimal, hex, or octal.
    files: [asc.py]
    srcdir: /pylib/pgm

astro:
    subdir: science
    descr: Collection of a few astronomical utilities, mostly derived
        from Meeus' books. meeus.py contains a number of Meeus' algorithms.
        julian.py contains Julian day routines. moon.py calculates
        the moon's phases. kepler.py solves the Kepler equation.
    files:
        - meeus.py
        - julian.py
        - kepler.py
        - [test/meeus_test.py, meeus_test.py]
        - [test/julian_test.py, julian_test.py]
        - [test/kepler_test.py, kepler_test.py]
        - [pgm/moon.py, moon.py]
    srcdir: /pylib

ball:
    subdir: shop
    descr: Python script to calculate steps to turn a ball on a lathe.
    files: [ball.py]
    srcdir: /pylib/pgm

bar:
    subdir: shop
    descr: Python script to print out a table of the masses of bar
        stock in different sizes. You can choose diameters of either
        inches or mm and get the table in units of kg/m, lbf/ft, or
        lbm/in. Use the -c option to get conversion factors for other
        materials.
    files: 
        - bar.py
        - bar.readme
        - [../sig.py, sig.py]
        - [../columnize.py, columnize.py]
    srcdir: /pylib/pgm

bc:
    subdir: shop
    descr: Contains a python script that will calculate the Cartesian
        coordinates of holes on a bolt circle.
    files: 
        - bc.py
        - [../sig.py, sig.py]
    srcdir: /pylib/pgm

bcmt:
    subdir: math
    descr: A document containing small math tables that will print
        out to be about the size of a business card.
    files: [
        BusinessCardMathTables.odt*,
        BusinessCardMathTables.pdf,
        out/small_log_table.png*,
        out/small_math_tables.page1.png*,
        out/small_math_tables.page2.png*
    ]
    ignore: Probably of interest to few people
    srcdir: /math/BusinessCardMathTables

bd:
    subdir: util
    descr: Performs a comparison between binary files; differences
        are printed in hex dump format. You can print an ASCII picture
        that represents where the different bytes in the files are
        in percentage through the file.
    files: [bd.c]
    srcdir: /tools/misc

bgrep:
    subdir: util
    descr: Python script to search for regular expressions and strings
        in binary files.
    files: [bgrep.py]
    ignore: Few people would be interested
    srcdir: /pylib/pgm

bidict:
    subdir: util
    descr: Creates a dictionary object in python that lets you treat
        it in both directions as a mapping. If bd is a bidict, you
        perform normal dictionary access as 'bd[key]', while getting
        the key that corresponds to a particular value is gotten via
        'bd(value)'. I wrote this because an application needed to
        get both the number of month names (e.g., Feb to 2 and be
        able to get the month name associated with a month number).
        It's an example of a discrete bijective function.
    files: 
        - bidict.py
        - [test/bidict_test.py, bidict_test.py]
    srcdir: /pylib

bnc:
    subdir: elec
    descr: Gives some experimental data about using RF coax cables
        with BNC connectors for DC and low-frequency power.
    files: [
        BNC_connector_power.odt*,
        BNC_connector_power.pdf,
        pictures/CenTech_IR_Thermometer.jpg*,
        pictures/bnc_cable_measuring_short_resistance.jpg*,
        pictures/bnc_cable_HP_cable_resistance.jpg*,
        pictures/bnc_cable.png*,
        pictures/connector_dimensions.jpg*,
        pictures/bnc_connector_parts.jpg*,
        pictures/bnc_outside_resistance.jpg*
    ]
    ignore: PDF is large
    srcdir: /elec/components

bode:
    subdir: elec
    descr: Generate a Bode plot with a python script (needs numpy and
        matplotlib).  You define the transfer function in a file which
        is passed on the command line.
    files: [bode.py]
    srcdir: /pylib/pgm

bucket:
    subdir: shop
    descr: Shows how to calculate bucket volumes and mark volume calibration
        marks on nearly any bucket.  It turns out there's a reasonably
        simple closed formula for this, regardless of the cross-sectional
        shape of the bucket.  Includes a python script that will do the
        calculations for you (you'll have to modify the script if the
        bucket isn't round or square).
    files: [
        bucket.py,
        bucket.odt*,
        bucket.pdf
    ]
    srcdir: /pylib/pgm

c300:
    subdir: math
    descr: Discusses the Concise 300, a circular slide rule still in
        production in Japan. If you've never used a slide rule, you
        may be surprised to find that they can be good tools to help
        you with calculations accurate to roughly one percent.
    files: [
        Concise300.odt*,
        Concise300.pdf,
        pictures/concise_300_front.png*,
        pictures/concise_300_back.png*
    ]
    ignore: Few people are interested in slide rules anymore
    srcdir: /math/one_page_calculator

cart:
    subdir: shop
    descr: Simple platform for Harbor Freight garden cart.
    files: [
        CartPlatform.odt*,
        CartPlatform.pdf,
        pictures/green_cart_platform1.jpg*,
        pictures/green_cart_platform2.jpg*,
        pictures/green_cart_platform4.jpg*,
        pictures/green_cart_platform5.jpg*
    ]
    ignore: Update to show axle modifications
    srcdir: /shop/projects/CartPlatform

chain:
    subdir: shop
    descr: Contains a python script and a document to help with chain
        drilling holes and disks.
    files:
        - chain.odt
        - chain.pdf
        - chain.py
        - chain.readme
        - [../getnumber.py, getnumber.py]
        - [../sig.py, sig.py]
    srcdir: /pylib/pgm

cheat:
    subdir: shop
    descr: Contains various spreadsheets in Open Office format and
        PDFs of tables that I find handy to have in the shop.
    files: [
        0readme.odt,
        common_threads.ods,
        cutting_info.ods,
        decimal_equivalents.ods,
        diameter_to_rpm.ods,
        fractions.ods,
        pipe_threads.ods,
        tap_drills.ods,
        thread_depths.ods,
        Torx.ods,
        TurningSpeeds.odt,
        weights_bar_stock1.ods,
        wrench_sizes.ods,
        pdfs/0readme.pdf,
        pdfs/common_threads.pdf,
        pdfs/cutting_info.pdf,
        pdfs/decimal_equivalents.pdf,
        pdfs/diameter_to_rpm.pdf,
        pdfs/fractions.pdf,
        pdfs/pipe_threads.pdf,
        pdfs/tap_drills.pdf,
        pdfs/thread_depths.pdf,
        pdfs/Torx.pdf,
        pdfs/TurningSpeeds.pdf,
        pdfs/weights_bar_stock1.pdf,
        pdfs/wrench_sizes.pdf
    ]
    ignore: Pretty specialized
    srcdir: /shop/cheat_sheets

chemname:
    subdir: science
    descr: A list of archaic chemical names with their modern equivalents
        and chemical formulas.
    files: [
        chemical_names.odt,
        chemical_names.pdf
    ]
    srcdir: /help/science
    ignore:  Convert over to the spreadsheet version in /p/doc/spreadsheets/chemical_names.ods.

circ3:
    subdir: shop
    descr: Python script that calculates the radius/diameter of a circle
        that passes through three points. You can specify either the
        Cartesian coordinates of the points or the distances between
        the points. If you download the python uncertainties library,
        the script will calculate the uncertainty in the radius/diameter
        given one or more uncertainties for the points or distances.
    files: 
        - circ3.py
        - circ3.odt*
        - circ3.pdf
        - [../sig.py, sig.py]
    srcdir: /pylib/pgm

clamps:
    subdir: shop
    descr: Discusses machinist's parallel clamps, why they're useful,
        and how to make your own.
    files:
        - MachinistClamp.odt*
        - MachinistClamp.pdf
        - pictures/toolmaker_clamp3.png*
        - pictures/machinist_clamp_CS_1910_pg_11.png*
        - pictures/toolmaker_clamp2.png*
        - pictures/toolmaker_clamp4a.png*
        - pictures/toolmaker_clamp4b.png*
        - pictures/machinist_clamp_3.png*
        - pictures/Jorgensen_woodworker_clamp.png*
        - pictures/old_man_3.png*
        - [pictures/small/finger_clamp1.png*, pictures/finger_clamp1.png*]
        - [pictures/small/finger_clamp2.png*, pictures/finger_clamp2.png*]
        - [pictures/small/finger_clamp3.png*, pictures/finger_clamp3.png*]
        - [pictures/small/machinist_clamp.png*, pictures/machinist_clamp.png*]
        - [pictures/small/machinist_clamp_4.png*, pictures/machinist_clamp_4.png*]
        - [pictures/small/machinist_clamp_5.png*, pictures/machinist_clamp_5.png*]
        - [pictures/small/machinist_clamp_6_aluminum.png*, pictures/machinist_clamp_6_aluminum.png*]
        - [pictures/small/machinist_clamp_7_jaws.png*, pictures/machinist_clamp_7_jaws.png*]
        - [pictures/small/toolmaker_clamp1.png*, pictures/toolmaker_clamp1.png*]
    ignore: Reduce picture sizes by 2
    srcdir: /shop/projects

cnt:
    subdir: util
    descr: Command-line utility to count the number of bytes in a file
        and present a histogram of the results. It can optionally present
        a 256x256 table of the counts of one byte that follows another
        byte. A command line option allows various filters to be applied
        before doing the counting.
    files:
        - cnt.py
        - cnt.readme
        - fpformat.py
        - [pgm/pager.py, pager.py]
    ignore: Of interest to few
    srcdir: /pylib

color:
    subdir: util
    descr: Python module to provide color printing to a console window.
        Should work on both Windows and Linux.
    files: [color.py]
    srcdir: /pylib

columnize:
    subdir: prog
    descr: Python script to columnize a sequence into columns. Run
        it as a script to convert stdin to columns or use the Columnize()
        function in your own scripts. Somewhat similar to the UNIX
        pr command, but doesn't do pagination.
    files: [columnize.py]
    srcdir: /pylib

comb:
    subdir: prog
    descr: A python script that will produce permutations and combinations
        of the lines in a file. Can be useful for generating test cases.
    files: [comb.py]
    ignore: itertools has such things today
    srcdir: /pylib/pgm

cove:
    subdir: shop
    descr: A python script and documentation that show you how to cut
        a cove with your table saw.  Use this formula and method when
        it just has to be done correctly on a workpiece you can't mess
        up on.
    files: [
        cove.odt*,
        cove.pdf,
        cove.py
    ]
    srcdir: /pylib/pgm

cs:
    subdir: elec
    descr: Describes how to make a battery-operated 1 ampere current source
        used to make low resistance measurements.  You can measure to 0.1 
        milliohm with the typical digital multimeter.
    files:
        - CurrentSource.odt*
        - CurrentSource.pdf
        - pictures/1_A_current_source.jpg*
        - pictures/LM317_current_source.jpg*
        - pictures/shunt_current_source.jpg*
    srcdir: /elec/projects

csnippets:
    subdir: prog
    descr: This is a zip file of the C snippets code put together by
        Bob Stout; it is the Jul 1997 edition, although I downloaded
        it 18 Jan 2011 from somewhere. Apparently Bob Stout died in
        2008 and the snippets domain wasn't picked up by anyone else
        (the snippets.org now belongs to someone, but it isn't related
        to Stout's snippet collection). I thought it would be useful
        to make sure there was another cache of the Snippets collection.
        While some of the code is only of interest to archeologists
        investigating primitive DOS cultures, there are numerous useful
        algorithms in there, so it's worth your time to take a look,
        as there are 416 separate C files.  We all owe a debt of gratitude
        to Bob Stout for his dedication in writing, collecting, and
        collating all this stuff.
    files:
        - [C_snippets_Jan2011.zip, C_snippets.zip]
    ignore: 'Yes'
    srcdir: /p/pictures/hu.orig/other

cut:
    subdir: shop
    descr: Contains a python script that will calculate a solution
        to the one-dimensional cutting problem.  This problem appears
        when you have a set of raw materials and need to cut a stated
        set of workpieces from the stock.  The algorithm used is one
        called first fit decreasing, which means to sort the stock
        and pieces to be cut by size, then select the largest piece
        and cut it from the smallest piece of stock.
    files:
        - cut.odt*
        - cut.pdf 
        - cut.py
        - [../odict.py, odict.py]
        - [../sig.py, sig.py]
    srcdir: /pylib/pgm

dbm:
    subdir: elec
    descr: Table of dBm to voltage conversions for 50, 600, and 75
        ohm impedances.
    files:
        - dbm.odt*
        - dbm.pdf
    ignore: Limited interest
    srcdir: /elec/spreadsheets

dedent:
    subdir: util
    descr: Python script that will remove the common space characters
        from a set of text lines from files given on the command line
        or stdin.
    files: [dedent.py]
    srcdir: /pylib/pgm

demag:
    subdir: shop
    descr: Describes a simple demagnetizing tool you can make from scrap
        materials.
    files:
        - Demagnetizer.odt*
        - Demagnetizer.pdf
        - pictures/demagnetizer_gap.jpg*
        - pictures/demagnetizer1.jpg*
        - pictures/demagnetizer2.jpg*
        - pictures/demagnetizer4.jpg*
        - pictures/demagnetizer3.jpg*
        - pictures/demagnetizer5.jpg*
        - pictures/magnet_on_screwdriver_trick.png*
    srcdir: /elec/projects

density:
    subdir: shop
    descr: Python script to calculate densities of various materials.
        The script performs the following tasks.  Look up the density
        of a particular material, find materials that have a density
        close to a given value, express density information in desired
        units, and show results relative to a given density.
    files:
        - density.odt*
        - density.pdf
        - density.py
        - [../sig.py, sig.py]
    srcdir: /pylib/pgm

diam:
    subdir: science
    descr: Plots of circles showing the relative mean diameters of
        planets and moons in the solar system.
    files: [diameters.pdf]
    ignore: Limited interest
    srcdir: /science/astronomy/diameters

dino:
    subdir: math
    descr: This document discusses doing calculations without using
        an electronic calculator. It also includes a spreadsheet that
        gives the tables that were common in the math books years ago,
        as people don't use this stuff much anymore. I'm not advocating
        that we give up our calculators, but it's useful for a technical
        person to know how to reason quantitatively when a calculator
        isn't handy. This document looks at some of the methods for
        doing this.
    files:
        - DinosaurArithmetic.odt*
        - DinosaurArithmetic.pdf
        - pictures/round_abs_4_digits.png*
        - pictures/round_rel_4_digits.png*
        - pictures/roundoff_study_4_digits.png*
        - pictures/barlows_squares.png*
        - pictures/binom_approx.png*
        - pictures/trig_approx.png*
        - pictures/squares_cubes.png*
        - pictures/5_place_logs.png*
        - pictures/business_card_math_tables.jpg*
        - pictures/slide_rule.png*
        - pictures/sama_etani_ee_front.png*
        - pictures/sama_etani_ee_back.png*
        - pictures/angle_square_root_2_multiply.png*
    ignore: Update to a single PDF and eliminate tables
    srcdir: /math/Dinosaur_Arithmetic

ditchpump:
    subdir: shop
    descr: Comments and tips on using a ditch pump to water your lawn.
    files:
        - [DitchPump_pub.odt*, DitchPump.odt*]
        - [DitchPump_pub.pdf, DitchPump.pdf]
        - pictures/internal_pipe_wrench.jpg*
        - pictures/pump_house.png*
        - pictures/cimg1743.jpg*
        - [pictures/small/2_inch_suction_17Jun2013_1.png*, pictures/2_inch_suction_17Jun2013_1.png*]
        - [pictures/small/2_inch_suction_17Jun2013_2.png*, pictures/2_inch_suction_17Jun2013_2.png*]
        - [pictures/small/float_switch_1.png*, pictures/float_switch_1.png*]
        - [pictures/small/pipe_shield_2.png*, pictures/pipe_shield_2.png*]
        - pictures/small/pump_house.png*
        - [pictures/small/pump_rear_5Aug2012.png*, pictures/pump_rear_5Aug2012.png*]
    ignore: Reduce picture size by 3
    srcdir: /doc/home/sprinklers

diurnal:
    subdir: science
    descr: Shows a plot of the light from the sky measured with a cheap
        photodiode.  Since inexpensive datalogging equipment can be
        purchased that uses e.g. the USB interface, this would be a
        great experiment for school kids and parents to do together.
        Because it's so simple to do, I predict you'll get hooked if
        you try it.
    files:
        - diurnal_variations.odt*
        - diurnal_variations.pdf
        - pictures/photodiode.png*
        - pictures/experimental_setup.jpg*
        - pictures/held_in_vise.jpg*
        - pictures/2.8_days_of_data.png*
        - pictures/soffit_mounting.jpg*
        - pictures/21Jul2011_all_points.jpg*
        - pictures/21Jul2011_evening4.jpg*
        - pictures/21Jul2011_evening5.jpg*
        - pictures/mounting_with_tube2.jpg*
        - pictures/28Jul2011_effects.jpg*
        - pictures/mounting_geometry.jpg*
        - pictures/collimated_detector_view.jpg*
    ignore: Yes -- keep legacy PDF because it's big
    srcdir: /science/diurnal_optics

dmath:
    subdir: math
    descr: Contains a python module dmath.py that is a drop-in replacement
        (nearly) for the python math module when calculating with python's
        Decimal numbers.  Using this library, you can calculate elementary
        functions to any desired accuracy.  To make the switch, just
        change e.g.  'import math' to 'import dmath as math'.
    files:
        - dmath.py
        - dmath_test.py
        - [readme, 0readme]
    ignore: Limited interest, but probably should be included
    srcdir: /math/dmath

donor:
    subdir: misc
    descr: Organ donation became an important topic for me
        after my granddaughter was killed.
    files:
        - Donor.odt*
        - Donor.pdf
        - pictures/organ_donation_2.png*
    srcdir: /doc

drtri:
    subdir: shop
    descr: This is a simple modification to a 30-60-90 drafting triangle
        that lets you use it to draw 45 degree angles.
    files:
        - [drafting_triangle_tip.odt*, DraftingTriangleTip.odt*]
        - [drafting_triangle_tip.pdf, DraftingTriangleTip.pdf]
        - pictures/drafting_triangle_tip.png*
    ignore: Limited interest
    srcdir: /shop/projects

drules:
    subdir: shop
    descr: Contains some drafting rules that I've always wanted. These
        are primarily 6 inch scales both in inch and mm divisions.
        You can print them at full scale and glue them to a chunk of
        wood to make some handy scales.
    files: [drules.pdf]
    ignore: Limited interest
    srcdir: /shop/drafting_rules

ds:
    subdir: util
    descr: Contains python scripts to help you launch datasheets, manuals,
        and other documentation files from a command line prompt.  I
        use this script to lauch manuals and ebooks and it quickly
        finds the ones I want amongst thousands of files.  For example,
        to open the PDF manual on my HP 3400 voltmeter, I type the
        command  'ds 3400'  and I'm presented with three document choices
        that have the string '3400' in the file name. I choose the
        number of the file I want to open and it's launched.  If there's
        only one match, the file is opened in less than a second.  This
        is *much* faster than using a file system explorer to find
        a file.  I also describe how I launch various project I'm working
        on in my cygwin environment on Windows (a UNIX-like working
        environment).
    files:
        - ds.py
        - ds.odt* 
        - ds.pdf
        - abspath.py
        - _goto.py
        - [../../tools/app.cpp, app.cpp]
    srcdir: /pylib/pgm

dupfile:
    subdir: util
    descr: Python script to find duplicated files in a directory tree.
        It works by hashing each file, then looking for duplicate hashes
        and equal file sizes. It may take a long time on a big directory
        tree, but it will find places you're wasting space, especially
        if they are big files.  It will also find files that are hard-linked
        together, but you may want to use lnk.py for this task instead.
    files: [dupfile.py]
    ignore: Need to fix algorithm for speedup
    srcdir: /pylib/pgm

ef:
    subdir: math
    descr: Graphs of a variety of elementary math functions, useful
        for a quick picture of how they behave or to grab one or two
        significant figures of the value.
    files: [
        ElementaryFunctions.odt,
        ElementaryFunctions.pdf,
        images/elem.png,
        images/trig_deg.png,
        images/trig_rad.png,
        images/invtrig_deg.png,
        images/invtrig_rad.png,
        images/versed_deg.png,
        images/versed_rad.png,
        images/hyp1.png,
        images/hyp2.png,
        images/invhyp1.png,
        images/invhyp2.png,
        images/gud.png,
        images/gamma1.png,
        images/gamma2.png,
        images/normal_cdf.png,
        images/bessel.png,
        images/elliptic1_deg.png,
        images/elliptic1_rad.png,
        images/elliptic2_deg.png,
        images/elliptic2_rad.png
    ]
    ignore: 'Yes'
    srcdir: /math/elementary_functions

elements:
    subdir: science
    descr: Contains elements.pdf, a document that contains a periodic
        table of the elements, a plot of the vapor pressures of the
        elements, values of physical parameters sorted by value, and
        various physical parameters of the elements plotted as a function
        of atomic number. The raw data are contained in the elements.ods
        Open Office spreadsheet; the zip archive includes the python
        scripts used to generate the plots. If you'd like to generate
        the plots yourself, you can, as the tools are all open source
        or freely available, but be warned that there are numerous
        libraries that you'll need to get. I've wanted a document like
        this for a long time, but I knew that most of the work would
        be in manually typing in all the data from various places.
        I was right...  :^)
    files:
    - 0readme
    - elements.ods
    - elements.pdf
    - elements.py
    - elements_doc.odt
    - elements_doc.pdf
    - periodic_table.py
    - plot_page.py
    - property_plots.py
    - raw.py
    - sorted_properties.py
    - vapor_pressure.py
    - pictures/elastic_constants.jpg
    - [/pylib/fpformat.py, fpformat.py]
    ignore: Yes -- PDF is large
    srcdir: /science/elements

esr:
    subdir: elec
    descr: Describes a technique of estimating a capacitor's ESR (equivalent
        series resistance) without having to buy a special meter.
    files: [
        MeasuringESR.odt,
        MeasuringESR.pdf,
        pictures/fluke83_freq_response.png,
        pictures/ESR_estimate_pulse.png
    ]
    srcdir: /elec/Articles

ext:
    subdir: util
    descr: This python script will make a list of the extensions used
        in file names in the directories given on the command line.
        It can also recurse into each directory given on the command
        line.
    files: [ext.py]
    srcdir: /pylib/pgm

fdiff:
    subdir: util
    descr: Contains python scripts that can identify differences in
        two directory trees and perform updates as needed to synchronize
        these two trees.  I wrote these utilities in the late 1990's
        to help keep my work and home computers synchronized; the challenge
        was that new files that needed to be kept could be generated
        on either computer, so blind copying couldn't be used -- the
        script needs to determine the differences, based on such things
        as timestamp or file contents.  There are more modern tools
        such as WinMerge at Sourceforge, kdiff3, meld, etc.  that can
        do these comparisons, but I still sometimes utilize this python
        code for checking things with scripts.
    files:
    - ddiff.py
    - ddiffcp.py
    - [../pgm/dirset.py, dirset.py]
    - ddiff.readme
    srcdir: /pylib/other

fit:
    subdir: util
    descr: Provides a python function to fit a string of words into
        a given number of columns. When run as a script, can act as
        a simple text formatter.  You can control the number of spaces
        after a sentence and it won't recognize common abbreviations
        with a trailing period as the end of a sentence.
    files: [fit.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

fits:
    subdir: shop
    descr: Python script to calculate the required shaft or hole size
        given a basic dimension of a shaft or hole.
    files: [fits.py]
    srcdir: /pylib/pgm

fpen:
    subdir: misc
    descr: Discusses the care and feeding of fountain pens as writing
        tools.
    files: [
        fountain_pen_primer.odt,
        fountain_pen_primer.pdf,
        pictures/fountain_pen_point.jpg,
        pictures/pen_writing.jpg,
        pictures/parker_slimline_pen.jpg,
        pictures/hero616_disassembled.jpg,
        pictures/converter.jpg,
        pictures/shading.jpg,
        pictures/artist_nibs_speedball.jpg,
        pictures/artist_nibs_speedball_doodling.jpg,
        pictures/vanishing_point.jpg,
        pictures/pilot_varsity_disassembled.jpg,
        pictures/pencil_vs_ink.jpg,
        pictures/black_ink_water_test_26Nov2011.jpg,
        pictures/waterproofness_test.jpg,
        pictures/skrip_ink_bottle.jpg,
        pictures/mont_blanc_shoe_bottle1.jpg,
        pictures/small_ink_bottle.jpg,
        pictures/small_ink_bottle1.jpg,
        pictures/small_ink_bottle_holder.jpg,
        mixing_inks.jpg,
        color_wheel1.jpg,
        color_wheel2.jpg,
        pictures/toothpick_pen_flash.jpg,
        pictures/feathering.jpg,
        pictures/toothpick_pen_north_light.jpg,
        pictures/international_cartridge.jpg,
        pictures/international_cartridge_seal.jpg,
        ink_costs_us.png,
        pictures/paper_testing.jpg,
        pictures/japanese_pen_holder.png,
        pictures/pen_case.jpg,
        pictures/pen_wrap_Elizabeth_Boling.jpg,
        pictures/pen_holder.jpg,
        pictures/storage.jpg, pictures/belt_holder.jpg,
        pictures/blotter.jpg,
        pictures/bench_block.jpg,
        pictures/pen_disassembly_1.jpg,
        pictures/pen_disassembly_2.jpg,
        pictures/pen_disassembly_3.jpg,
        pictures/pen_disassembly_4.jpg,
        pictures/pen_dewaterer.jpg,
        pictures/ink_syringe_kit.jpg,
        pictures/parker_slimfold_shading.jpg,
        pictures/micromike.jpg,
        pictures/ohaus_balance.jpg,
        pictures/ink_density_with_no_flash.jpg
    ]
    ignore: Yes -- keep old PDF because it's big
    srcdir: /doc/pens

frac:
    subdir: math
    descr: A python script that will calculate a rational approximation
        to a  real number.  If you download the code.google.com/p/mpmath
        library, you can calculate to arbitrary precision.  Update
        - python 2.6 and later versions include the fractions module,
        which makes it easy to do such calculations.
    files: [frac.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

frange:
    subdir: math
    descr: A python module that provides a floating point analog to
        range().  Doesn't suffer from the typical floating point problems
        seen in naive implementations.
    files:
    - [../frange.py, frange.py]
    srcdir: /pylib/pgm
    tests: true

frustum:
    subdir: shop
    descr: Shows how to lay out the frustum of a cone with dividers
        in your shop.
    files: [
        LayingOutFrustumWithDividers.odt,
        LayingOutFrustumWithDividers.pdf,
        pictures/layout_an_arc_with_dividers.png
    ]
    srcdir: /shop/IntroToMetalShop/techniques

fseq:
    subdir: math
    descr: Contains a python script fseq.py that provides general-purpose
        sequence generation (arithmetic, geometric, logarithmically-spaced,
        etc.).  The script also provides useful random number generation
        facilities for doing Monte Carlo calculations at the command
        line, along with CDFs and PDFs of some distributions. It's
        easy to add support for other distributions.  See seq.py
        for a simpler script that just provides arithmetic series.
    files:
    - fseq.py
    - fseq.odt
    - fseq.pdf
    - [../cmddecode.py, cmddecode.py]
    - pictures/sampling_wor.png
    ignore: 'Yes'
    srcdir: /pylib/pgm

fset:
    subdir: prog
    descr: Treat lines of files as a set. Allows you to look at the
        union, intersection, difference, etc. between the lines of
        various files.
    files: [fset.py]
    srcdir: /pylib/pgm

gblock:
    subdir: shop
    descr: A C++ program to print out combinations of gauge blocks
        that yield a desired composite length (the subset sum problem).
        Should work with most any set of gauge blocks. Uses brute-force
        searching to find solutions -- it's not elegant, but it works.  A
        python script is also included that does the same task and
        it will probably be fast enough for most folks' needs.  The
        C++ code runs about an order of magnitude faster than the python
        code.
    files:
    - gauge.cpp
    - [/pylib/pgm/gb.py, gb.py]
    srcdir: /shop/software/gauge_blocks

glendag:
    subdir: shop
    descr: Describes a simple concrete sprinkler guard that my wife
        designed and built. We've used them for over 20 years and they
        work well, are simple to make, and cheap.
    files: [
        GlendaGuard.odt,
        GlendaGuard.pdf,
        pictures/glenda_guard_2.jpg,
        pictures/glenda_guard_1.jpg
    ]
    ignore: 'yes'
    srcdir: /shop/projects/GlendaGuard

goto:
    subdir: util
    descr: Contains a sh-type shell function and a python script that
        let you navigate around to various directories. I've had a
        number of UNIX users tell me they couldn't live without this
        tool once they started using it.
    files:
    - [_goto.py, goto.py]
    srcdir: /pylib/pgm

gpaper:
    subdir: math
    descr: Provides some common graph papers in PDF files that print
        on ANSI  A paper.  The python script that made them is included,
        so you can hack things if you e.g. want to change to A4 paper
        or modify colors or line widths.
    files: [
        graph_paper.py,
        5mm_A.pdf,
        dots_2tenths_A.pdf,
        drafting_A.pdf,
        engineering_A.pdf,
        letter_ruled_A.pdf,
        quarter_inch_A.pdf
    ]
    ignore: Low number of downloads
    srcdir: /doc/graph_paper

grid:
    subdir: eng
    descr: This python script will generate most any linear isotropic
        graph paper by creating a PostScript file.
    files: [eng_grid.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

help:
    subdir: prog
    descr: If you use the vim editor, you have a convenient tool for
        accessing textual information. This package contains the tools
        I use to build a help system I've used for the past couple
        of decades (I started building this textual information in
        the 1980's). Vim's ability to use  hyperlinks in its textual
        help files is used to advantage here.  I've used these files
        on both Windows and Linux boxes.
    files: [
        misc/makefile,
        misc/mort,
        prog/makefile,
        prog/awk,
        prog/bash,
        prog/basic,
        prog/c,
        prog/constants,
        prog/cpp,
        prog/darcs,
        prog/find,
        prog/fld,
        prog/flex,
        prog/g,
        prog/gdb,
        prog/hg,
        prog/hp3488,
        prog/html,
        prog/java,
        prog/korn,
        prog/make_,
        prog/mpmath,
        prog/pcl5,
        prog/perl4,
        prog/perl5,
        prog/ps,
        prog/python,
        prog/sed,
        prog/snippets,
        prog/sql,
        prog/stl,
        prog/subversion,
        prog/svn,
        prog/sympy,
        prog/utilities,
        prog/vcs,
        science/makefile,
        science/astronomical,
        science/biology,
        science/chemistry,
        science/electrical,
        science/materials,
        science/math,
        science/mathematica,
        science/matplotlib,
        science/numpy,
        science/physics,
        science/scipy,
        science/shop,
        science/sizes,
        science/units,
        hld/index.hld,
        h,
        doctags.c,
        mk,
        readme.odt,
        readme.pdf
    ]
    ignore: Yes -- very low interest
    srcdir: /help

hg:
    subdir: prog
    descr: Some python scripts that make it easier to work with Mercurial
        repositories.  delta.py shows you the revision numbers where
        a file changed; hgs.py shows you things like files that are
        not in the repository, changed files, etc.  fhg.py will find
        all Mercurial repositories under a given directory and show
        those needing a check-in.
    files: [
        delta.py, 
        fhg.py, 
        hgs.py,
        hg.readme
    ]
    softlinks:
    - [util/color/color.py, prog/hg/color.py]
    srcdir: /pylib/pgm

holes:
    subdir: shop
    descr: Contains a python script that will help you lay out holes
        that are equally-spaced around a circle.
    files: [
        holes.py,
        holes.drills,
        holes.odt,
        holes.pdf,
        pictures/drill_layout.png
    ]
    softlinks:
    - [prog/sig/sig.py, shop/holes/sig.py]
    srcdir: /pylib/pgm

hose:
    subdir: shop
    descr: Here's an effective way to secure a hose to a hose fitting.
        It's better than anything you can buy in a store.
    files: [
        HoseFitting.odt,
        HoseFitting.pdf,
        pictures/constrictor_knot_on_hose_fitting.png
    ]
    srcdir: /shop/projects

hppn:
    subdir: elec
    descr: This is a compilation of various 8-digit HP part numbers
        translated into more identifiable numbers. For example, a typical
        line is 1820-0839 TTL IC SN74175N.  This list may be of use
        to those with old HP instruments that need to find a replacement
        part. There are only about 2700 parts in this list, so it cannot
        be considered complete.  A python script can do the lookup
        tasks.
    files: [
        0readme, 
        hp.py,
        hp_parts
    ]
    ignore: 'Yes'
    srcdir: /elec/hp

iapws:
    subdir: eng
    descr: This zipfile contains C++ and python code that implements
        the IAPWS95 equations for the thermodynamic properties of water.
        See http://www.iapws.org/relguide/IAPWS-95.htm IAPWS95
    files: [
        iapws95.cpp,
        iapws95.h,
        iapws95.py,
        test.py
    ]
    ignore: 'Yes'
    srcdir: /science/john_pye/py

imp:
    subdir: elec
    descr: This python script will take a complex impedance in polar
        coordinates and print out the series and parallel models' values,
        reactance, dissipation factor, and quality factor.  I find
        this handy with an LCR meter -- I usually have the LCR meter
        measure the impedance and write that down; this script lets
        me then see all the other related parameters.  The measurement
        frequency is 1 kHz, but you can change this with a command
        line option.
    files: [impedance.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

ind:
    subdir: elec
    descr: Provides an Open Office spreadsheet that can calculate the
        inductance of common electrical structures.  Includes a PDF
        document describing the use and which gives references for
        the formulas used.  There is also a PDF file of the spreadsheet
        so that you can see what it looks like without having Open
        Office -- this will help you decide if you want to download
        and install Open Office to be able to use the spreadsheet.
    files: [
        inductance.ods,
        inductance.odt,
        inductance.pdf,
        inductance_spreadsheet.pdf,
        pictures/screenshot.jpg
    ]
    ignore: 'Yes'
    srcdir: /elec/software/coil_inductance

irr:
    subdir: science
    descr: Calculate irradiance over a wavelength band from a spectral
        irradiance data file. It is written to work with StellarNet
        spectroradiometer files, but it can easily be modified to work
        with other data files.
    files: [irr.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

lib:
    subdir: util
    descr: Python script command line tool to provide a facility for
        keeping snippets of code handy.  If you develop code at a command
        line, you'll probably want to use this script to keep often-used
        chunks of code at hand.  A handy feature is that it will highlight
        the items in color to indicate the language each snippet is
        implemented in (only works on Windows, but would be easy to
        hack the color.py module to work on other systems).
    files: [
        lib.py, 
        lib.dat
    ]
    ignore: 'Yes -- need to sanitize data file'
    srcdir: /pylib/pgm

license:
    subdir: prog
    descr: This is a python script that will allow you to change the
        license  you use in your source code files.  This is done by
        replacing a string between two 'trigger' strings.  A number
        of open source licenses are included in the script (e.g., BSD,
        GPL2, etc.) and it's easy to include others.  The script will
        first check that all the indicated source files have the trigger
        strings and that backup copies of the source files can first
        be made.
    files: [license.py]
    softlinks:
    - [util/color/color.py, prog/license/color.py]
    srcdir: /pylib

lnk:
    subdir: util
    descr: Python script to list the files in two directory trees that
        are hard-linked together. When you see an 'ls -l' listing that
        shows a file with 2 or more links, this script can help you
        find where those other links are without delving into the filesystem
        structure. If you have GNU find, the -samefile option can be
        used to do this too.
    files: [lnk.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

loo:
    subdir: util
    descr: Python script that will print out the image files in Open
        Office documents.  Image files that are not at or below the
        same directory as the document file will be marked '[not relative]'.  Missing
        files will be marked '[missing]'.  It can also be used as a
        module in other python programs.  Uses a heuristic rather than
        any deep knowledge about OO files.  It is particularly useful
        if you link image files into OO files (which I always do).
    files: [loo.py]
    softlinks:
    - [util/color/color.py, util/loo/color.py]
    srcdir: /pylib

lookup:
    subdir: util
    descr: Package that contains a python script that can help you
        look up words in a word dictionary. It can also use the information
        from WordNet to show synonyms, definitions, and types of words
        (e.g., adjectives, adverbs, nouns, and verbs).  See the words.pdf
        file for examples of use and what it can do for you.
    files:
    - lookup.py
    - mkwords.py
    - simple.py
    - wrap.py
    - [/pylib/pgm/words.odt, words.odt]
    - words.pdf
    - makefile
    - [/pylib/pgm/pictures/lookup_results.png, pictures/lookup_results.png]
    softlinks:
    - [util/color/color.py, util/lookup/color.py]
    srcdir: /pylib/types_of_words/WordNet/lookup

lvise:
    subdir: shop
    descr: Describes a snall vise that is straightforward to make with
        a milling machine.  I made mine from some 1 inch square aluminum
        bar stock and it has proven useful.  Scale it up or down as
        needed.
    files: [
        LittleVise.odt,
        LittleVise.pdf,
        pictures/LittleVise_1.png,
        pictures/LittleVise_2.png,
        pictures/Starrett_160_clamp.png
    ]
    ignore: 'Yes'
    srcdir: /shop/projects

manufy:
    subdir: prog
    descr: A short python script that will convert text lines to have
        double quotes and a newline at the end. This is useful to allow
        you to quickly write manpages for C or C++ code. The script
        also has a -u option to unmanufy some text.
    files: [manufy.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

markup:
    subdir: misc
    descr: Derives the equations for markup and profit used in business.
    files: [
        Markup.odt,
        Markup.pdf,
        pictures/markup.png,
        pictures/multiplier.png
    ]
    srcdir: /doc

mass:
    subdir: shop
    descr: Contains a python script that will calculate the volume
        and mass of a project constructed from various primitive geometrical
        objects.  This lets you e.g. evaluate the mass and volume of
        a prospective design and document it through the datafile describing
        it.
    files: [
        mass.bolt,
        mass.bucket,
        mass.cat,
        mass.earth,
        mass.fishtank,
        mass.frame,
        mass.house,
        mass.odt,
        mass.pdf,
        mass.py,
        mass.simple,
        mass.test
    ]
    softlinks:
    - [prog/sig/sig.py, shop/mass/sig.py]
    - [science/u/u.py, shop/mass/u.py]
    srcdir: /pylib/pgm

mixture:
    subdir: science
    descr: A python script to aid in mixture calculations. Adapted
        from a C program at http://www.myvirtualnetwork.com/mklotz/files/mixture.zip.
    files: [mixture.py]
    srcdir: /pylib/pgm

mk:
    subdir: util
    descr: This is a python script that is invoked with a file that
        contains lines of file pairs and a recipe.  When the first
        file is newer than the second, the recipe is executed.  I use
        it, for example, when editing a restructured text and CSS files
        used to make an HTML file.  When I save the RST or CSS file
        from my editor, the mk.py script detects that the source file
        is newer than the HTML file and executes the recipe, which
        in this case is 'make project.html'.  My browser is set to
        automatically load changed files, so I can see the changed
        HTML file immediately.  It's a handy efficiency improvement
        because you don't have to reach for the mouse, move to another
        window, run a command, then move back.
    files: [mk.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

mod:
    subdir: util
    descr: Python script to recursively find files that have changed
        within a specified time period.  It helps you find that file
        you know you worked on recently, but can't remember where it
        was or what its name is.
    files: [mod.py]
    srcdir: /pylib/pgm

mortgage:
    subdir: misc
    descr: Gives a table that lets you estimate your mortgage's monthly
        payment.  Doesn't include taxes or insurance though.
    files: [
        Mortgage.odt,
        Mortgage.pdf
    ]
    ignore: Old; probably of little interest
    srcdir: /math/mortgage

mp:
    subdir: util
    descr: This is a macro processor that is a string substitution
        tool. You can also include arbitrary python code in your text
        files. Use mp.py -h to read the man page.
    files: [mp.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

novas:
    subdir: science
    descr: Translation into python of some C code from the US Naval
        Observatory (http://aa.usno.navy.mil/software/novas/novas_c/novasc_info.html)
        It contains routines that are nearly identical to those used
        for calculations of the Astronomical Almanac.
    files: [novas.py]
    ignore: 'Yes'
    srcdir: /pylib

nozzle:
    subdir: shop
    descr: Describes a nice hose nozzle you can make if you have a
        lathe. It will work better for cleaning things off than the
        typical store-bought nozzles.
    files: [
        nozzle.odt, 
        nozzle.pdf, 
        nozzle.jpg,
        nozzle2.jpg
    ]
    ignore: 'yes'
    srcdir: /shop/projects/hose_nozzle

oct:
    subdir: elec
    descr: If you own an oscilloscope and like to troubleshoot electrical
        things, you'll probably want to build an Octopus tester.  One
        can be built from a 6.3 V RMS filament transformer and a single
        resistor, so there's no significant parts costs.  It's a handy
        troubleshooting tool.  People have been using them since the
        1930's.
    files:
    - 0readme
    - Octopus.odt
    - Octopus.pdf
    - pictures/octopus_non_sine.png
    - [pictures/small/BNC_connectors.png, pictures/BNC_connectors.png]
    - [pictures/small/octopus_100_nF.png, pictures/octopus_100_nF.png]
    - [pictures/small/octopus_3.3V_zener_diode.png, pictures/octopus_3.3V_zener_diode.png]
    - [pictures/small/octopus_3H_inductor.png, pictures/octopus_3H_inductor.png]
    - [pictures/small/octopus_520_mH.png, pictures/octopus_520_mH.png]
    - [pictures/small/octopus_E3615A_swept.png, pictures/octopus_E3615A_swept.png]
    - [pictures/small/octopus_E_B_2N2222.png, pictures/octopus_E_B_2N2222.png]
    - [pictures/small/octopus_E_B_2N2222_10volts.png, pictures/octopus_E_B_2N2222_10volts.png]
    - [pictures/small/octopus_E_C_2N2222_10_volts.png, pictures/octopus_E_C_2N2222_10_volts.png]
    - [pictures/small/octopus_blue_LED.png, pictures/octopus_blue_LED.png]
    - [pictures/small/octopus_diode_cap_parallel.png, pictures/octopus_diode_cap_parallel.png]
    - [pictures/small/octopus_diode_resistor.png, pictures/octopus_diode_resistor.png]
    - [pictures/small/octopus_inductor_diode_composite.png, pictures/octopus_inductor_diode_composite.png]
    - [pictures/small/octopus_res_cap_parallel.png, pictures/octopus_res_cap_parallel.png]
    - [pictures/small/octopus_res_diode_components.png, pictures/octopus_res_diode_components.png]
    - [pictures/small/octopus_res_diode_composite.png, pictures/octopus_res_diode_composite.png]
    ignore: PDF is large
    srcdir: /elec/projects/octopus

odict:
    subdir: prog
    descr: A bare-bones ordered dictionary for python. You won't need
        this if you are on python 2.7 or later because there's a built-in
        ordered  dictionary.
    files: [odict.py]
    srcdir: /pylib
    tests: true

oo_math:
    subdir: math
    descr: Introduces the equation-writing capabilities of Open Office
        2.0.  I find that I have no need for LaTeX given the equation-handling
        abilities of Open Office. While not as powerful as TeX or LaTeX,
        it's adequate for my needs and provides a variety of other
        tools.  Also includes a cheatsheet that you can modify.
    files: [
        OO_math.odt,
        OO_math.pdf,
        math_cheatsheet.odt,
        math_cheatsheet.pdf
    ]
    ignore: Change to just include cheatsheet
    srcdir: /doc

oopy:
    subdir: prog
    descr: A document explaining how to call python functions from
        Open Office Calc spreadsheets.
    files: [
        PythonFromCalc.odt,
        PythonFromCalc.pdf
    ]
    srcdir: /doc

out:
    subdir: prog
    descr: Contains a python module that provides a utility object
        for printing string representations of objects to a stream.  I've
        used something like this for years and it's a good tool to
        replace the print command/function, which causes a bit of friction
        between python 2 and 3 code.  This module has been tested with
        both python 2 and 3.
    files: [
        out.odt,
        out.pdf,
        out.py
    ]
    ignore: Yes (use print() in new code)
    srcdir: /pylib
    tests: true

paper:
    subdir: misc
    descr: Contains a python script to calculate various things about
        paper.  You input the grammage in grams per square meter, size
        of the paper sheet, number of sheets, and an optional cost
        and various metrics about the paper are printed out. Lets you
        compare paper purchases by e.g.  looking at the cost in $ per
        square meter. I wrote this script to help me evaluate whether
        I should start a specialty paper business (the results convinced
        me I shouldn't).
    files: [paper.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

papersz:
    subdir: misc
    descr: Shows a scale drawing of various ISO and US paper sizes.  The
        python script that generates it is included, but you'll need
        to download a graphics library to use it.
    files: [
        paper_sizes.py,
        paper_sizes.pdf
    ]
    ignore: 'Yes'
    srcdir: /pylib/pgm

parts:
    subdir: elec
    descr: Describes one way of storing lots of little electronic parts
        and how to find them quickly.
    files: [
        PartsStorageMethods.odt,
        PartsStorageMethods.pdf
    ]
    ignore: 'Yes'
    srcdir: /elec/projects

pcmplx:
    subdir: prog
    descr: Python module that allows you to parse complex numbers when
        they are written in the ways humans like to write them.
    files: [parse_complex.py]
    ignore: 'Yes'
    srcdir: /pylib

pdf:
    subdir: util
    descr: This is a python script that can manipulate PDF files. Typical
        operations are to concatenate a number of PDF files to another
        PDF file, select certain pages of a PDF file and write them
        to another PDF file, rotating pages, watermarking. etc. You'll
        also need to download the pyPdf library to use this script.
    files: [pdf.py]
    ignore: 'Yes'
    srcdir: /pylib

pfind:
    subdir: util
    descr: Python script to find files and directories. Similar to
        the UNIX find (but not as powerful), but with a somewhat simpler
        syntax. It can color-code the output to show where things matched.
        I use this script a lot.
    files: [pfind.py]
    srcdir: /pylib/pgm

pflow:
    subdir: eng
    descr: Nomograph for pipe flow.
    files: [flow.pdf]
    ignore: 'Yes'
    srcdir: /science/nomographs

pipes:
    subdir: shop
    descr: A document showing a derivation of a formula that can be
        used to make a template for cutting the end of a pipe so that
        it can be welded to another pipe.
    files: [
        pipes.odt, 
        pipes.pdf
    ]
    srcdir: /math/AnalyticGeometry

posts:
    subdir: shop
    descr: Using a class 2 lever can be a surprisingly effective way
        to pull fence posts out of the ground.
    files: [
        PullingFencePosts.odt,
        PullingFencePosts.pdf,
        pictures/fence_post_driver.png,
        pictures/hi_lift_jack_and_plate.png,
        pictures/chain_with_hooks.png,
        pictures/chain_grab.png
    ]
    ignore: 'yes'
    srcdir: /shop/projects/PullingFencePosts

pqs:
    subdir: eng
    descr: This package contains python scripts that make it easy to
        simulate a production process that is inspected by a measurement
        process with a significant measurement uncertainty.  Such a
        situation can result in significant producer's and consumer's
        risk.  It's easy to understand how this Monte Carlo simulation
        script works and believe its output.
    files: [
        ProcessSimulator.odt,
        ProcessSimulator.pdf,
        manufacture.py,
        pqs.py
    ]
    softlinks:
    - [prog/sig/sig.py, eng/pqs/sig.py]
    srcdir: /math/ProcessAnalyzer

primes:
    subdir: math
    descr: Some python scripts that deal with primes, factoring, and
        integer properties.  The primes.py module generates a list
        of primes by the Sieve of Eratosthenes and is fast for a script
        (and it's a short chunk of code only a few lines long).  It
        also can factor integers.  The int.py script prints out various
        facts about the integers given on the command line. The primes_fast.cpp
        file is a chunk of C++ code that is a faster implementation
        of the sieve.
    files:
    - primes.py
    - [pgm/int.py, int.py]
    - primes.readme
    - [/tools/primes_fast.cpp, primes_fast.cpp]
    ignore: Test under python 3.  Move files to /math.
    srcdir: /pylib

python:
    subdir: prog
    descr: Contains a document that discusses why learning the python
        programming language might be a good thing for technical folks.
    files:
    - [/doc/Python.odt, Python.odt]
    - [/doc/Python.pdf, Python.pdf]
    - [/pylib/other/ellipse_circumference.py, ellipse_circumference.py]
    - [pgm/resistor.py, resistor.py]
    softlinks:
    - [math/frange/frange.py, prog/python/frange.py]
    srcdir: /pylib

qmd:
    subdir: math
    descr: Short discussion of how to do multiplications and divisions
        by hand when you only need a specified number of significant
        figures in the answer. The methods reduce the amount of work
        needed over the methods taught in grammar school. Also includes
        a short blurb on additions.
    files: [
        QuickMultDiv.odt, 
        QuickMultDiv.pdf
    ]
    ignore: 'Yes'
    srcdir: /math/Dinosaur_Arithmetic

react:
    subdir: elec
    descr: Contains two reactance charts in PDF form along with a short
        file describing their use. Update 20 May 2013 - added similar
        charts for Ohm's Law.
    files:
    - [out/reactance.pdf, reactance.pdf]
    - [out/big_reactance.pdf, big_reactance.pdf]
    - [../ohms_law_chart/OhmsLaw1.pdf, OhmsLaw1.pdf]
    - [../ohms_law_chart/OhmsLaw2.pdf, OhmsLaw2.pdf]
    ignore: 'Yes'
    srcdir: /elec/software/reactance_chart

readability:
    subdir: util
    descr: Will calculate various readability indexes for text files,
        such as the Gunning Fog Index, the Flesch-Kinkaid Grade Level,
        etc.
    files: [
        readability.py,
        readability.readme,
        words_syllables.py
    ]
    ignore: 'Yes'
    srcdir: /pylib/pgm

refcards:
    subdir: shop
    descr: Contains some reference cards that will print out on 4 by
        6 inch cards. I find these handy to keep in my drafting materials
        box when I'm doing design work at a drafting board.
    files:
    - [pdf/cards.pdf, reference_cards.pdf]
    - decimal_equiv.ods
    - densities_liquids.ods
    - densities_metal.ods
    - densities_miscellaneous.ods
    - densities_plastics_woods.ods
    - double_depths.ods
    - drills1.ods
    - grains_to_g.ods
    - metric_taps_dies.ods
    - metric_threads.ods
    - mm_to_inch1.ods
    - mm_to_inch2.ods
    - mm_to_inch3.ods
    - pipe_sizes.ods
    - pipe_threads.ods
    - pvc_pipe.ods
    - screw_heads.ods
    - screw_heads_metric.ods
    - screw_threads.ods
    - screws_wood_Torx.ods
    - self_threading_screws.ods
    - shcs.ods
    - slope_to_angle_deg.ods
    - slope_to_angle_rad.ods
    - spring_pins.ods
    - surface_speeds_SFPM.ods
    - tap_drills.ods
    - weight_bar_stock_kg.ods
    - weight_bar_stock_lb.ods
    - wrench_sizes.ods
    - pictures/self_tapping_screws1.jpg
    - pictures/self_tapping_screws2.jpg
    srcdir: /shop/ReferenceCards

res:
    subdir: elec
    descr: Contains two tools that help you deal with resistors.  The
        *resistor.cpp* file is a C++ program that can calculate resistors
        to use for a voltage divider for a desired ratio. It also has
        the ability to get a desired resistance using two on-hand resistors
        in either series or parallel.  You can enter the values of
        your stock resistors or use standard series such as E6, E12,
        etc.  The *resistor.ods* file is an Open Office spreadsheet
        that calculates the resistance of wires of circular and rectangular
        cross sections (handy for designing shunts).  The PDF files
        contain the documentation.
    files: [
        makefile,
        resistor.cpp,
        resistor.ods,
        resistor.odt,
        resistor.pdf,
        resistor_s.pdf,
        resistor.test
    ]
    ignore: 'Yes'
    srcdir: /elec/software/resistors

rms:
    subdir: elec
    descr: An article for hobbyists about making RMS electrical measurements.
    files: [RMS.pdf]
    srcdir: /elec/Articles

root:
    subdir: math
    descr: Pure-python root-finding methods such as bisection, Brent's
        method, Ridder's method, Newton-Raphson, and a nice general-purpose
        method by Jack Crenshaw that uses inverse parabolic interpolation.
    files:
    - root.py
    - [test/root_test.py, root_test.py]
    srcdir: /pylib
    tests: true

rpath:
    subdir: math
    descr: A python module for a rectilinear path object.  You supply
        it with a set of points and then you can interpolate to points
        on the path via a parameter.
    files:
    - [../path.py, path.py]
    srcdir: /pylib/pgm
    tests: true

ruler:
    subdir: util
    descr: For console windows; prints a variety of rulers to stdout.
        It's easy to modify to get different ruler types.
    files: [ruler.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

sawbuck:
    subdir: shop
    descr: Describes a simple and easy to make sawbuck that's made
        from eight identical pieces of 2x4.  I made mine so that I
        could cut it from two 8' 2x4s.  It should cost less than $10
        and take less than an hour to make.  All you need to make it
        are a hand saw, drill/bits, and a screwdriver.
    files: [
        SawBuck.odt,
        SawBuck.pdf,
        pictures/sawbuck_oblique_open.jpg,
        pictures/sawbuck_side_folded.jpg
    ]
    ignore: 'Yes'
    srcdir: /shop/projects

scale:
    subdir: math
    descr: The scale.pdf file contains two sheets of paper with slide
        rule type scales on them. If you duplex print this and keep
        it in a binder, you may find it useful for simple technical
        calculations when an electronic calculator isn't handy. The
        other file explains how to use things.
    files: [
        scale.pdf,
        OnePageCalculator.odt,
        OnePageCalculator.pdf,
        pictures/sfpm.png
    ]
    ignore: 'yes'
    srcdir: /math/one_page_calculator

scramble:
    subdir: util
    descr: Contains a python script to scramble letters in words, leaving
        the first and last characters alone. I wrote this because an
        intriguing email that's been circulating the web for years
        seemed to indicate that only the first and last letters of
        a word are really important for reading comprehension. You
        can make up your own mind about the truth of this statement
        by using the script on a variety of text.
    files: [
        scramble.py, 
        scramble.html
    ]
    ignore: 'Yes'
    srcdir: /pylib/pgm

seg:
    subdir: math
    descr: Python script to calculate parameters of a circular segment.    Translated
        from a program written by Marv Klotz.
    files: [seg.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

seq:
    subdir: prog
    descr: Python script to send various arithmetical progressions
        to stdout.  Handles integers, floating point, and fractions.
        Also see fseq.py.
    files:
    - [pgm/seq.py, seq.py]
    softlinks:
    - [math/frange/frange.py, prog/seq/frange.py]
    srcdir: /pylib

shave:
    subdir: misc
    descr: Some thoughts on shaving your beard.
    files: [
        shaving.odt*,
        shaving.pdf
    ]
    srcdir: /doc

shorttbl:
    subdir: math
    descr: A set of tables of elementary math functions intended to
        print on half of an ANSI-A sized piece of paper. These tables
        are intended for use when a calculator isn't available. The
        original is an Open Office spreadsheet -- email me if you'd
        like a copy of it.
    files: [
        ShortTables.ods*,
        ShortTables.odt*,
        ShortTables.pdf,
        ShortTables_doc.pdf
    ]
    ignore: Little apparent interest; obsolete
    srcdir: /math/tables

shuffle:
    subdir: prog
    descr: C program to randomly shuffle the bytes of a file. You can
        use either the internal simple linear congruential generator
        or an external source of random bytes (i.e., a file) to do
        the shuffling.
    files: [shuffle.c]
    ignore: 'Yes'
    srcdir: /tools/shuffle

sig:
    subdir: prog
    descr: Contains a python script to format floating point numbers
        to a specified number of significant figures or round to a
        specified template. Works with floats, integers, python Decimals,
        fractions, mpmath numbers, numpy arrays, complex numbers, and
        numbers with uncertainty, including any mix of those number
        types in a container that can be iterated over.
    files: [
        sig.py,
        sig.odt*,
        sig.pdf
    ]
    srcdir: /pylib
    tests: true

sinesticks:
    subdir: shop
    descr: How to build a simple device from scrap that will measure
        angles in the shop.  Perhaps surprisingly, it can measure with
        resolution as good or better than a Starrett machinist's vernier
        protractor that costs hundreds of dollars.
    files: [
        sine_sticks.odt*,
        sine_sticks.pdf
    ]
    ignore: Reduce picture size by 2
    srcdir: /shop/projects

solar:
    subdir: science
    descr: This document describes a python script that prints out
        the dimensions of a scaled solar system. You can use it to
        make a scale solar system in your yard or on your street. Be
        warned -- things will be smaller and farther apart than you
        think. This would be a good exercise for a parent and a child
        -- both will learn information you can't learn from a book.
    files: [
        SolarSystemScaleModel.odt*,
        SolarSystemScaleModel.pdf,
        pictures/zoom_from_neptune.jpg,
        pictures/zoom_from_saturn.jpg
    ]
    ignore: 'yes'
    srcdir: /science/astronomy/diameters

space:
    subdir: util
    descr: See where the space is being consumed in a directory tree
        and where the biggest files are.
    files: [space.py]
    srcdir: /pylib/pgm

sphshell:
    subdir: science
    descr: Discusses gravitation and electrostatics inside a uniform
        spherical shell and why there is no force on a particle. Also
        looks at Henry Cavendish's elegant experiment in the 1700's
        showing that the exponent in Coulomb's Law is 2.
    files: [
        SphericalShell.odt*,
        SphericalShell.pdf
    ]
    srcdir: /science

spiral:
    subdir: math
    descr: Python scripts that deal with spirals.  spiral.py is an
        interactive tool to calculate various spiral parameters. archimedean.py
        is a python module containing a function that calculates the
        exact length of an Archimedean spiral.
    files:
    - [../archimedean.py, archimedean.py]
    - spiral.py
    ignore: Test under python 3.
    srcdir: /pylib/pgm

split_cat:
    subdir: util
    descr: Python scripts to split a file into chunks, print out SHA1
        hashes of each chunk, and allow you to recombine the chunks
        later back into the original file. Useful for band-limited
        tools like email and floppy disks.
    files: [
        split.py,
        cat.py
    ]
    ignore: 'Yes'
    srcdir: /pylib/pgm

square:
    subdir: shop
    descr: How to use a carpenter's square to lay out angles from 1
        degree to 44 degrees. The fractional values given will result
        in angles accurate to 0.01 degree, assuming your square and
        your layouts are accurate enough. I find an angle square a
        much handier tool for carpentry layout than the carpenter's
        square and it's accurate enough for the usual purposes.
    files:
    - [angles_and_carpenters_square.odt, square.odt*]
    - [angles_and_carpenters_square.pdf, square.pdf]
    ignore: 'Yes'
    srcdir: /shop/cheat_sheets

stack:
    subdir: prog
    descr: A python module that implements a basic stack.  You have
        the option of making the stack homogeneous (i.e., it will only
        allow storage of one type of item) or of fixed size.
    files: [stack.py]
    ignore: 'Yes'
    srcdir: /pylib
    tests: true

sumbytes:
    subdir: prog
    descr: A short C++ program that will read all the bytes from the
        files given on the command line and compute various statistics
        from them. Outputs the number of bytes read, sum, sum of squares,
        mean, standard deviation, and minimum/maximum values.
    files: [sumbytes.cpp]
    ignore: 'Yes'
    srcdir: /tools

thd:
    subdir: shop
    descr: Prints out various dimensions associated with threads. Calculates
        the values based on the ASME B1.1-1989 standard document. If
        you machine threads on a lathe, you may find this program handy.
    files:
    - thd.py
    - [../asme.py, asme.py]
    srcdir: /pylib/pgm

tlc:
    subdir: util
    descr: Python script to rename all files in a directory to lower
        or upper case.
    files: [tlc.py]
    srcdir: /pylib/pgm

tokens:
    subdir: util
    descr: Will produce a list of readable words from an HTML file,
        all in lower case, one per line. You could then run the list
        of words through a spell checker.
    files: [html_tokens.py]
    ignore: 'Yes'
    srcdir: /pylib/pgm

tree:
    subdir: util
    descr: Python script to print an ASCII representation of a directory
        tree.  It can optionally decorate the tree with each directory's
        size in MBytes.
    files: [tree.py]
    srcdir: /pylib/pgm

tri:
    subdir: math
    descr: Python script to solve triangles.
    files: [
        tri.py,
        tri.odt*,
        tri.pdf
    ]
    softlinks:
    - [prog/sig/sig.py, math/tri/sig.py]
    srcdir: /pylib/pgm

trigd:
    subdir: math
    descr: Gives some algebraic expressions for a few special values
        of trigonometric functions in degrees.
    files: [
        TrigDegrees.odt*,
        TrigDegrees.pdf
    ]
    srcdir: /math/herman

triguc:
    subdir: math
    descr: Contains a vector drawing of the trig functions on the unit
        circle.  The python script used to generate the graphics is
        included, so you can tweak it to your tastes.
    files:
    - trig_functions.py
    - [images/trig_functions.pdf, trig_functions.pdf]
    - TrigUnitCircle.odt*
    - TrigUnitCircle.pdf
    - images/trig_functions.jpg
    srcdir: /math/elementary_functions

ts:
    subdir: prog
    descr: The ts.py script provides facilities for text substitution
        in text files.  It has only 3 basic commands (define a substitution,
        turn  the output on/off, and include a file) and the ability
        to include   blocks of python code in the text file.  Though
        it's relatively    simple to use, it can provide a fair bit
        of power.
    files: [
        ts.py, 
        ts.ts, 
        makefile, 
        ts.css
    ]
    ignore: Not released yet
    srcdir: /pylib/pgm/ts

u:
    subdir: science
    descr: A lightweight python library module that provides conversion
        factors for various physical units.  Using a clever idea by
        Steve Byrnes, it can also perform dimensional checking to determine
        dimensional consistency of numerical calculations. Easy to
        use -- an experienced scientist or engineer will be using it
        in a few minutes after seeing an example (see the PDF in the
        package for details).
    files: [
        u.odt*,
        u.pdf,
        u.py
    ]
    srcdir: /pylib
    tests: true

uni:
    subdir: util
    descr: A handy python script to find Unicode characters.  Example
        - find  the Unicode symbol for a steaming pile of poo.  Run
        the script with the regular expression 'poo' as an argument.
        You'll see the symbol you want has a code point of U+1f4a9.
        Run the script with '1f4a9' on the command line and the PDF
        containing the symbol will be opened.  You'll need to download
        the relevant files from the Unicode website (see the comments
        for the links).
    files: [unicode.py]
    srcdir: /pylib/pgm

units:
    subdir: science
    descr: A short blurb on the capabilities of the wonderful GNU units
        program.  This is one of the most-used programs on my computer
        because I am constantly converting between various units. It
        can also help you do back-of-the-envelope type calculations
        and avoid making dumb unit mistakes that invalidate everything.
    files: [
        GNU_units.odt*,
        GNU_units.pdf
    ]
    srcdir: /doc

unx:
    subdir: util
    descr: Produces a list of files that are candidates for turning
        their execute bit permission off. Handy in cygwin, since most
        Windows programs don't know how to behave properly with respect
        to the execute bit.
    files: [unx.py]
    ignore: Windows only
    srcdir: /pylib/pgm

url:
    subdir: util
    descr: Python script that will interpret a URL from a Google search
        page.  This script uses a heuristic to strip out the relevant
        URL. As written, it requires the Win32 python extensions, but
        it shouldn't be too hard to hack it to work under a different
        OS.
    files: [url.py]
    ignore: Windows only
    srcdir: /pylib/pgm

us:
    subdir: util
    descr: Python script to replace all space characters in file names
        with underscores. Can also do the reverse and act recursively.
    files: [spc_to_underscore.py]
    srcdir: /pylib/pgm

util:
    subdir: prog
    descr: Contains a number of miscellaneous python functions I've
        written and collected from the web.
    files: [util.py]
    srcdir: /pylib
    tests: true

vs:
    subdir: elec
    descr: Here's a cheap and simple voltage standard you can make
        with one resistor, an IC that costs about a buck, and three
        AAA batteries (and it doesn't need a power switch). The last
        set of batteries of mine lasted for 4.8 years and the standard
        deviation of the voltage output was 170 uV including room temperature
        variations and the variance of the voltmeter over that time
        period.
    files: [
        PortableVoltageStandard.odt*,
        PortableVoltageStandard.pdf,
        pictures/voltage_reference.png
    ]
    ignore: Need to make PDF
    srcdir: /elec/Articles

wave:
    subdir: elec
    descr: Provides a python script (uses numpy and scipy) that lets
        you construct various waveforms used in engineering and science
        tasks. The design and semantics allow you to construct more
        complex composite waveforms.  It's also easy to add new waveform
        definitions.
    files: [
        waveform.py,
        waveform.odt,
        waveform.pdf,
        pictures/waveform_sine.png,
        pictures/waveform_gated.png,
        pictures/waveform_clipping.png,
        pictures/waveform_scr.png,
        pictures/waveform_trapezoid.png,
        pictures/waveform_staircase.png,
        pictures/waveform_modulation.png,
        pictures/waveform_mw.png
    ]
    ignore: 'Yes'
    srcdir: /pylib/pgm

weigh:
    subdir: shop
    descr: Demonstrates how I  weighed  our trailer with a lever. With
        a 12 foot long 4x4, I was able to measure 2500 pounds.
    files:
    - [weighing_a_trailer.odt, weigh.odt*]
    - [weighing_a_trailer.pdf, weigh.pdf]
    - weighing1.jpg
    - weighing4.jpg
    ignore: 'Yes'
    srcdir: /doc/trailer

wordnum:
    subdir: prog
    descr: A python script that can convert back and forth between
        numbers and their word forms.  Handles short and long scales,
        ordinals, integers, floats (normal and exponential notation),
        and fractions.  Easy interface through an object's function
        call; wordnum(36) gives 'thirty six'; wordnum('thirty six')
        returns the integer 36.  Tested on python 2.7.6 and 3.4.0.
    files: [wordnum.py]
    srcdir: /pylib
    tests: true

wrap:
    subdir: prog
    descr: Two python scripts to wrap and unwrap text files. The unwrap.py
        script will take a typical text file with two line breaks between
        paragraphs and change the text to one long line per paragraph.
        This makes it suitable for importing into word processing programs.
        wrap.py does the opposite and turns text files with long lines
        into text files with lines wrapped at a given number of columns.
    files: [
        wrap.py,
        unwrap.py
    ]
    ignore: 'Yes'
    srcdir: /pylib/pgm

xmastom:
    subdir: misc
    descr: Using Christmas tree lights to keep tomato plants from freezing
        at night.
    files: [
        XmasTomatoes.odt*,
        XmasTomatoes.pdf
    ]
    ignore: 'Yes'
    srcdir: /doc

xor:
    subdir: prog
    descr: C++ program to XOR a data file and key file together to
        encrypt a file. While you'd want a cryptographically-secure
        one time pad for serious encryption work, a file compressed
        by e.g. zip, gzip, or bzip could be a practical substitute
        for the key file. Read the xor.pdf file for further thoughts.
        Also includes two python utilities that can generate one-time
        pads and create files with fixed or random bytes.
    files: [
        xor.cpp,
        xor.odt*,
        xor.pdf,
        otp.py,
        mkfile.py,
        md5.c,
        md5.h
    ]
    ignore: 'Yes'
    srcdir: /tools/xor

xref:
    subdir: prog
    descr: A C++ console program that will cross reference the tokens
        in a set of files -- each token will be listed in alphabetical
        order with the file it occurs in along with the line numbers
        it's found on.  It can perform spell checking.  It has a -k
        option which will split composite tokens in the source code
        and spell check the individual tokens (this helps identify
        composite tokens that are misspelled).
    files: [xref.cpp]
    srcdir: /tools/xref

xyz:
    subdir: math
    descr: Contains a python script that provides a mini-language to
        perform analytical geometry calculations in 2 and 3
        dimensions.  Use translations, rotations, and dilatations to
        transform to different coordinate systems.  Geometric objects
        provided are points, lines, and planes. The script can
        calculate their intersections, reflections, and projections
        and find angles and distances between them.  
    files:
        - xyz.py
        - [../geom_prim.py, geom_prim.py]
        - [../test/geom_prim_test.py, geom_prim_test.py]
        - [../sig.py, sig.py]
        - xyz.odt*
        - xyz.pdf
        - xyz.area
        - xyz.iss
        - xyz.shop
        - xyz.sphere
        - xyz.splice
    softlinks:
    - [prog/sig/sig.py, math/xyz/sig.py]
    srcdir: /pylib/pgm
    tests: true

yankee:
    subdir: shop
    descr: Discusses the Yankee screwdriver, a useful tool that has
        been in production for more than 100 years.  Also called a
        push-drill, it's a mechanically-sophisticated tool that can
        drive screws and drill small holes.  While cordless drills
        are now the preferred tool for many shop tasks, you'll find
        that a Yankee screwdriver can still be handy.  This document
        shows you how to make bits for it, make an adapter that lets
        the Yankee use 1/4 inch hex bits, or make an adapter for 1/4
        inch square drive sockets.  It also shows you how to take one
        of these screwdrivers apart so it can be cleaned.  Dimensional
        sketches are included of some parts that might need to be made.
    files: [
        YankeeDriver.odt*,
        YankeeDriver.pdf,
        pictures/yankee_screwdriver_1.png,
        pictures/yankee_screwdriver_2.png,
        pictures/yankee_screwdriver_3.png,
        pictures/yankee_screwdriver_4.png,
        pictures/yankee_screwdriver_5.png,
        pictures/yankee_screwdriver_6.png,
        pictures/yankee_screwdriver_7.png,
        pictures/yankee_screwdriver_8.png,
        pictures/yankee_screwdriver_9.png,
        pictures/yankee_screwdriver_dims.png
    ]
    ignore: Reduce picture size by 2
    srcdir: /shop/projects
